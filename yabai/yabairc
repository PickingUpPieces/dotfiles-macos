#!/usr/bin/env bash

# ====== Startup ===============================
# the scripting-addition must be loaded manually if
# you are running yabai on macOS Big Sur. Uncomment
# the following line to have the injection performed
# when the config is executed during startup.
#
# for this to work you must configure sudo such that
# it will be able to run the command without password

sudo yabai --load-sa
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"


# ====== Variables =============================

gaps_top="29" # spacebar is at the top; Apple Menu Bar is 25px
gaps_bottom="4"
gaps_left="4"
gaps_right="4"
gaps_inner="4"

normal_border_color="010101"
focused_border_color="808080"
preselect_border_color="2d74da"

# ====== Tiling settings =======================

yabai -m config layout                      bsp
yabai -m config top_padding                 "${gaps_top}"
yabai -m config bottom_padding              "${gaps_bottom}"
yabai -m config left_padding                "${gaps_left}"
yabai -m config right_padding               "${gaps_right}"
yabai -m config window_gap                  "${gaps_inner}"

yabai -m config mouse_follows_focus         on
yabai -m config focus_follows_mouse         off

yabai -m config mouse_modifier              fn
yabai -m config mouse_action1               move
yabai -m config mouse_action2               resize

yabai -m config window_topmost              off
yabai -m config window_opacity              off
yabai -m config window_shadow               off # More Performance

yabai -m config active_window_opacity       1.0
yabai -m config normal_window_opacity       0.9
yabai -m config split_ratio                 0.5
yabai -m config auto_balance                on

# ====== Border settings =======================

yabai -m config window_border               off # Not used because of BigSur round corners
yabai -m config window_border_width         2
yabai -m config active_window_border_color  "0xE0${focused_border_color}"
#yabai -m config insert_window_border_color  "0xE0${preselect_border_color}"
yabai -m config normal_window_border_color  "0x00${normal_border_color}"

# ====== List of rules =========================

# Don't manage Preferences
yabai -m rule --add title='Preferences$' manage=off layer=above grid=3:3:1:1:1:1
yabai -m rule --add title='Force Quit Applications$' manage=off layer=above grid=3:3:1:1:1:1
yabai -m rule --add app='^System Preferences$' manage=off layer=above grid=3:3:1:1:1:1
yabai -m rule --add app="^System Information" manage=off

# Other Stuff
yabai -m rule --add label="Activity Monitor" app="^Activity Monitor$" manage=off
yabai -m rule --add label="KeePassXC" app="^KeePassXC$" manage=off
yabai -m rule --add label="Calculator" app="^Calculator$" manage=off
yabai -m rule --add label="Dictionary" app="^Dictionary$" manage=off
yabai -m rule --add label="mpv" app="^mpv$" manage=off
yabai -m rule --add label="The Unarchiver" app="^The Unarchiver$" manage=off
yabai -m rule --add label="Transmission" app="^Transmission$" manage=off
yabai -m rule --add label="Safari" app="^Safari$" title="^(General|(Tab|Password|Website|Extension)s|AutoFill|Se(arch|curity)|Privacy|Advance)$" manage=off
yabai -m rule --add app="^Stats" manage=off
yabai -m rule --add app="^AirDrop" manage=off
yabai -m rule --add app="^Tunnelblick" manage=off

# TODO Define list of applications which should be displayed in grid and add them to minimize_scratchpad script
# List important as well for applying grid when moving these windows to another desktop
yabai -m rule --add label="Calendar" app="^Calendar$" manage=off grid=6:6:1:1:4:4
yabai -m rule --add label="Spotify" app="^Spotify$" manage=off grid=6:6:1:1:4:4
yabai -m rule --add label="Messages" app="^Messages$" manage=off grid=6:6:1:1:4:4

# Open finder always on top, since otherwise it stays hidden behind applications (Seems like it's finder specific)
yabai -m rule --add label="Finderall" app="^Finder$" manage=off layer=above grid=6:6:1:1:4:4
yabai -m rule --add label="Finder" app="^Finder$" title="(Co(py|nnect)|Move|Info|Pref|About Finder)" manage=off layer=above 

	
# Scratchpad
yabai -m rule --add label="Bitwarden" app="^Bitwarden$" manage=off grid=6:6:1:1:4:4
yabai -m rule --add label="TickTick" app="^TickTick$" title="TickTick" manage=off grid=6:6:1:1:4:4
yabai -m rule --add label="TickTick_windows" app="^TickTick$" title='Untitled' manage=off 
yabai -m rule --add label="Slack" app="^Slack$" manage=off grid=6:6:1:1:4:4
yabai -m rule --add label="Rocket.Chat" app="^Rocket.Chat$" manage=off grid=6:6:1:1:4:4

# Rules for specific space assignment
#yabai -m rule --add app="^Mail$" space=3


# ====== List of signals =========================

# Destroy empty spaces
yabai -m signal --add event=space_changed action="sh ~/.config/scripts/destroy_empty_space.sh"

# Minimize Scratchpad windows, when focus is changed
#yabai -m signal --add event=window_focused action="sh ~/.config/scripts/minimize_scratchpad.sh"
#yabai -m signal --add event=space_changed action="sh ~/.config/scripts/minimize_scratchpad.sh"
#yabai -m signal --add event=application_front_switched action="sh ~/.config/scripts/minimize_scratchpad.sh"


# Source: https://github.com/koekeishiya/yabai/issues/719
function get_recent_focused_window {
    window_id = yabai -m query --windows --space | jq 'map(select(."is-minimized" == false and ."is-hidden" == false)) | .[0].id'
    return $window_id
}

# focus window after active space changes
yabai -m signal --add event=space_changed action="yabai -m window --focus \${functions[get_recent_focused_window]}"
 
# focus window after active display changes
yabai -m signal --add event=display_changed action="yabai -m window --focus \${functions[get_recent_focused_window]}"


# Source: https://github.com/koekeishiya/yabai/issues/1012
# Through v4 application_terminated should trigger window_destroyed as well
yabai -m signal --add event=window_destroyed action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus \${functions[get_recent_focused_window]} || yabai -m window --focus first"
yabai -m signal --add event=application_terminated action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus \${functions[get_recent_focused_window]} || yabai -m window --focus first"


# https://github.com/koekeishiya/yabai/issues/485
# https://github.com/koekeishiya/yabai/issues/878
# Sleep delay so auto-swoosh by macOS is not the last space AND due to asynchronous behaviour of signals
yabai -m signal --add event=space_changed action="sleep 0.5 && yabai -m query --spaces --space | jq '.index' | xargs -I % ruby ~/.config/scripts/space_focus.rb write %"
yabai -m signal --add event=display_changed action="sleep 0.5 && yabai -m query --spaces --space | jq '.index' | xargs -I % ruby ~/.config/scripts/space_focus.rb write %"
yabai -m signal --add event=window_destroyed action="sleep 0.3 && yabai -m space --focus \$(ruby ~/.config/scripts/space_focus.rb read)"
yabai -m signal --add event=application_terminated action="sleep 0.3 && yabai -m space --focus \$(ruby ~/.config/scripts/space_focus.rb read)"
